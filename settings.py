from collections import OrderedDict
import configparser
import os


config_name = 'config.ini'
if not os.path.isfile(config_name):
    print('Config file not found... creating it.')
    config = configparser.ConfigParser(allow_no_value=True,dict_type=OrderedDict)
    config['README'] = {'#all directories and paths should be relative to the work path! ':None,
                        '#e.g. if the work dir (where the main script is located) is in C:/MCUNN ':None,
                        '#and benign_dir = benign_samples then the folder should be at C:/MCUNN/benign_samples/ ':None,
                        '#you can leave certain paths empty if you would like them to be in the work path ':None,
                        '#make sure the directories/paths are using a forward-slash NOT backward-slash! e.g. C:/ NOT C:\\':None}
    config['VARIABLES'] = {'learning_rate': 0.01,
                           'decay_rate': 0.975,
                            'batch_size':128,
                            'n_classes':2,
                            'n_epochs':10,
                            'n_folds':10
                            }
    config['TEST INFO'] = {'test_dir':'test_samples','test_vectors_path':'test_vectors.json'}
    config['TRAINING INFO'] = {'benign_dir': 'samples/benign_samples', 'malicious_dir': 'samples/malware_samples','samples_vectors_path':'samples_vectors.json'}
    config['OTHERS'] = {'vt_apikey': '','sigs_path':'sigs.txt','function_list_path':'function_calls.txt','errors_path':'errors.txt',
                       'benign_sample_search_path':'C:/Windows', 'evaluation_malware_samples':'samples/evaluation/malware',
                      'evaluation_benign_samples':'samples/evaluation/benign', 'evaluation_savepath' :'eval_feature_vectors.json'}
    with open(config_name, 'w') as config_file:
        config.write(config_file)

os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
work_dir = os.getcwd()
error_path = os.path.join(work_dir, 'errors.txt')
__author__ = 'mkazemhn'
print('Start-up configuration...')
try:
    config = configparser.ConfigParser()
    config.read(config_name)
    benign_search_path = config['OTHERS']['benign_sample_search_path']
    signatures_filepath = os.path.join(work_dir,config['OTHERS']['sigs_path'])
    samples_benign_dir = os.path.join(work_dir, config['TRAINING INFO']['benign_dir'])
    samples_malicious_dir = os.path.join(work_dir, config['TRAINING INFO']['malicious_dir'])
    samples_vectors_filepath = os.path.join(work_dir, config['TRAINING INFO']['samples_vectors_path'])
    test_dir = os.path.join(work_dir,config['TEST INFO']['test_dir'])
    test_vectors = os.path.join(work_dir,config['TEST INFO']['test_vectors_path'])
    function_list_file = os.path.join(work_dir,config['OTHERS']['function_list_path'])
    evaluation_samples_benign_dir = os.path.join(work_dir, config['OTHERS']['evaluation_benign_samples'])
    evaluation_samples_malware_dir = os.path.join(work_dir, config['OTHERS']['evaluation_malware_samples'])
    eval_list_of_dir = [evaluation_samples_benign_dir, evaluation_samples_malware_dir]
    eval_savepath = os.path.join(work_dir, config['OTHERS']['evaluation_savepath'])
    vt_apikey = config['OTHERS']['vt_apikey']
    list_of_dir = [samples_benign_dir, samples_malicious_dir]
    n_classes = int(config['VARIABLES']['n_classes'])
    n_folds = int(config['VARIABLES']['n_folds'])
    n_epochs = int(config['VARIABLES']['n_epochs'])
    batch_size = int(config['VARIABLES']['batch_size'])
    decay_rate = float(config['VARIABLES']['decay_rate'])
    learning_rate = float(config['VARIABLES']['learning_rate'])
    print('Variables & paths have been loaded!')
except:
    print('CONFIG FILE IS CORRUPT! PLEASE BACK-UP AND REMOVE TO GENERATE A NEW CONFIG FILE!')