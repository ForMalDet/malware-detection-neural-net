import settings
import os
import json
from shutil import move
def create_all_function_list():
    function_calls = []
    ctr = 0
    for dir in settings.list_of_dir:
        print('Extracting unique function calls in ' + dir + ' ... please wait...')
        for file in os.listdir(dir):
            ctr += 1
            filepath = os.path.join(dir,file)
            with open(filepath, 'r') as file:
                function_calls.extend(file.readlines())
            function_calls = [x.strip() for x in function_calls]
            function_calls = list(set(function_calls))
    print('Total number of unique function calls: ' + str(len(function_calls)) + ' from ' + str(ctr) + ' files')
    with open(settings.function_list_file,'w') as file:
        for function in function_calls:
            write_str = function + '\n'
            file.write(write_str)
    print('List of all unique function calls has been saved to ' + settings.function_list_file)

def parse_test_files():
    if not os.path.isfile(settings.function_list_file):
        print('Function calls list file is missing, please re-train the model!')
        return
    all_functions = []
    test_sample = {}
    with open(settings.function_list_file, 'r') as opened_file:
        all_functions.extend(opened_file.readlines())
    all_functions = [x.strip() for x in all_functions]
    for test_file in os.listdir(settings.test_dir):
        if 'import_' in test_file:
            test_filepath = os.path.join(settings.test_dir,test_file)
            filename_sha1 = test_file[7:]
            print('Processing ' + filename_sha1)
            function_calls = []
            with open(test_filepath, 'r') as file:
                function_calls.extend(file.readlines())
            function_calls = [x.strip() for x in function_calls]
            bit_vector = [1 if func_name in function_calls else 0 for func_name in all_functions]
            test_samples[filename_sha1] = {'vector': bit_vector}
            print('Moving ' + test_file + ' to test archive...')
            move(test_filepath,os.path.join(os.path.join(settings.test_dir,'archive'),test_file))
    with open(settings.test_vectors, 'w') as outfile:
        json.dump({'samples': test_samples, 'features': all_functions, }, outfile)
def parse_test_file(filename):
    if not os.path.isfile(settings.function_list_file):
        print('Function calls list file is missing, please re-train the model!')
        return
    all_functions = []
    test_sample = {}
    with open(settings.function_list_file, 'r') as opened_file:
        all_functions.extend(opened_file.readlines())
    all_functions = [x.strip() for x in all_functions]
    for test_file in os.listdir(settings.test_dir):
        if test_file[7:] == filename:
            test_filepath = os.path.join(settings.test_dir,test_file)
            filename_sha1 = test_file[7:]
            print('Processing ' + filename_sha1)
            function_calls = []
            with open(test_filepath, 'r') as file:
                function_calls.extend(file.readlines())
            function_calls = [x.strip() for x in function_calls]
            bit_vector = [1 if func_name in function_calls else 0 for func_name in all_functions]
            test_sample[filename_sha1] = {'vector': bit_vector}
            print('Moving ' + test_file + ' to test archive...')
            move(test_filepath,os.path.join(os.path.join(settings.test_dir,'archive'),test_file))
            with open(settings.test_vectors, 'w') as outfile:
                json.dump({'samples': test_sample, 'features': all_functions, }, outfile)
            break
def parse_sample_files(type='train'):
    if not os.path.isfile(settings.function_list_file):
        create_all_function_list()
    all_functions = []
    with open(settings.function_list_file, 'r') as opened_file:
        all_functions.extend(opened_file.readlines())
    all_functions = [x.strip() for x in all_functions]
    sample_function_map = {}
    sample_is_malware_map = {}
    list_of_dir = []
    mal_dir = None
    savepath = None
    if type is 'eval':
        list_of_dir = settings.eval_list_of_dir
        mal_dir = settings.evaluation_samples_malware_dir
        savepath = settings.eval_savepath
    elif type is 'train':
        list_of_dir = settings.list_of_dir
        mal_dir = settings.samples_malicious_dir
        savepath = settings.samples_vectors_filepath
    for dir in list_of_dir:
        print('Processing files in ' + dir + '. This may take a while depending on the number of samples...!')
        for filename in os.listdir(dir):
            if 'import' in filename:
                filepath = os.path.join(dir, filename)
                filename_sha1 = filename[7:]
                sample_is_malware_map[filename_sha1] = [1, 0] if dir is mal_dir else [0, 1]
                function_calls = []
                with open(filepath, 'r') as file:
                    function_calls.extend(file.readlines())
                function_calls = [x.strip() for x in function_calls]
                sample_function_map[filename_sha1] = function_calls
    all_samples = {}  # mapping combining app_permission_map and app_malicious_map using bits
    for sha1 in sample_function_map:
        bit_vector = [1 if func_name in sample_function_map[sha1] else 0 for func_name in all_functions]
        all_samples[sha1] = {'vector': bit_vector, 'is_malicious': sample_is_malware_map[sha1]}
    with open(savepath, 'w') as outfile:
        json.dump({'samples': all_samples, 'features': all_functions, }, outfile)
        print('File-parsing finished!')
        print('The feature vectors have been saved in ' + savepath)
